#!/bin/bash

##################################
##### Create a new container #####
##################################

# Prompt for container configuration details
read -p "Enter image [default=ubuntu/18.04]: " image
read -p "Enter container name: " container
read -p "Enter container disk quota (e.g. 500MB or 10GB) [default=5GB]: " quota
read -p "Enter container memory limit (e.g. 512MB or 4GB) [default=512MB]: " memory
read -p "Enter container CPU core count limit (1-$(nproc)) [default=1]: " cpu
read -p "Enter container CPU priority (1-10) [default=5]: " priority
read -p "Enter container profile [default=default]: " profile
read -p "Enter storage pool [default=default]: " pool

# Revert to the default quota if no input is provided
if [ -z $quota ]; then
    quota=5GB
# Check if the value provided is a valid number that does not start with "0" and ends with either "MB" or "GB"
elif [[ ! $quota =~ ^([1-9]{1}|[1-9][0-9]{1,})(MB|GB)$ ]]; then
    echo "Error: Invalid quota"
    exit
fi

# Revert to the default memory limit if no input is provided
if [ -z $memory ]; then
    memory=512MB
# Check if the value provided is valid
elif [[ ! $memory =~ ^[0-9]{1,}(MB|GB)$ ]]; then
    echo "Error: Invalid memory limit"
    exit
fi

# Revert to the default cpu count if no input is provided
if [ -z $cpu ]; then
    cpu=1
# Check if the value provided is a valid number that does not start with "0"
elif [[ $cpu =~ ^([1-9]{1}|[1-9][0-9]{1,})$ ]]; then
    # Check if there are enough cores available
    if (( $cpu <= $(nproc --all) )); then
        :
    else
        echo "Error: Not enough cores"
        exit
    fi
else
    echo "Error: Invalid CPU core value"
    exit
fi

if [ -z $priority ]; then
    priority=5
# Check if the value provided is within the 1-10 range
elif [[ ! $priority =~ ^([1-9]|10)$ ]]; then
    echo "Error: Invalid priority value"
    exit
fi

# Generate a randomized container name if none was provided
if [ -z $container ]; then
    container=$(cat /dev/urandom | tr -dc 'a-z' | fold -w 12 | head -n 1)
fi

# Check if the container already exists
if lxc list --columns="n" | grep -oq $container; then
    echo "Error: Container $container already exists"
    exit
fi

# Revert to the default pool if no input is provided
if [ -z $pool ]; then
    pool=default
fi

# Check if the storage pool exists
if lxc storage show $pool 2>&1 | grep -oq 'Error: not found'; then
    echo "Error: Storage pool does not exist"
    exit
fi

# Revert to the default profile if no input is provided
if [ -z $profile ]; then
    profile=default
fi

# Check if the container profile exists
if lxc profile show $profile 2>&1 | grep -oq 'Error: not found'; then
    echo "Error: Container profile does not exist"
    exit
fi

# Revert to default image if no input is provided
if [ -z $image ]; then
    image=ubuntu/18.04
fi

# Verify connectivity before proceeding
while ! ping -c 1 -W 1 cloud-images.ubuntu.com > /dev/null 2>&1; do
	echo "Network: Unable to reach cloud-images.ubuntu.com"
	sleep 3
done

# Copy the remote image to the local image store
echo "Copying image"
lxc image copy images:$image local: --alias $image --auto-update

# Check if the image exists and create the container
if lxc image list --columns="l" | grep -oq $image; then
    lxc init -p $profile $image $container
else
    echo "Error: Image not found"
	exit
fi

# Apply resource constraints
if lxc list --columns="n" | grep -oq $container; then
    lxc config set $container limits.memory $memory
    lxc config set $container limits.memory.enforce soft
    lxc config set $container limits.cpu $cpu
    lxc config set $container limits.cpu.priority $priority
    lxc config set $container boot.autostart false
    lxc config device add $container root disk path=/ pool=$pool size=$quota 1>/dev/null
else
    echo "Error: Container creation failed"
    exit
fi

# Start the container
echo "Starting $container"
lxc start $container
