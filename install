#!/bin/bash

# Check if the script is running with root privileges
if [ "$EUID" -ne 0 ]; then
    echo "Error: Not running as root"
    exit
fi

# Import or define variables
if [ -f ./vars ]; then
    source ./vars
else
    cat > ./vars << EOL
timezone="UTC"
ipv4="192.168.1.2/24"
gw="192.168.1.1"
dns1="1.1.1.1"
dns2="1.0.0.1"
domain="example.com"
quota="false"
livepatch="false"
if_device="eth0"
if_bridge="br0"
pool_device="/dev/sda2"
pool_name="default"
pool_description="Default btrfs storage"
pool_fs="btrfs"
pool_mount="/mnt/lxd"
profile_name="default"
profile_description="Default profile"
EOL
    echo "Info: Example vars file created in $(realpath ./vars)"
    exit
fi

# Set the system timezone
timedatectl set-timezone $timezone

# Upgrade the system and install necessary packages
apt-get -y update
apt-get -y upgrade
apt-get -y install ufw openssh-server unattended-upgrades sysstat iputils-ping
apt-get -y remove --purge lxd lxd-client liblxc1 lxcfs
apt-get -y autoremove

# Install the LXD snap
snap install lxd

# Allow SSH and enable ufw
sed -i 's/IPV6=yes/IPV6=no/g' /etc/default/ufw
ufw allow 22/tcp
ufw enable

# Create a bridge interface
cat > /etc/netplan/*.yaml << EOL
network:
  version: 2
  renderer: networkd
  ethernets:
    $if_device:
      dhcp4: no
      wakeonlan: true
  bridges:
    $if_bridge:
      interfaces: [$if_device]
      dhcp4: no
      addresses: [$ipv4]
      gateway4: $gw
      nameservers:
        search: [$domain]
        addresses: [$dns1,$dns2]
EOL

# Apply the network configuration
netplan apply

# Wait until connectivity has been re-established
while [[ ! $(curl -s --max-time 3 -I archive.ubuntu.com) ]]; do
    echo "Warning: Unable to reach archive.ubuntu.com"
    sleep 3
done

# Initialize LXD with preseeded config
cat <<EOF | lxd init --preseed
config: {}
networks: []
storage_pools:
- config:
    source: $pool_device
  description: $pool_description
  name: $pool_name
  driver: $pool_fs
profiles:
- config: {}
  description: $profile_description
  devices:
    eth0:
      name: eth0
      nictype: bridged
      parent: $if_bridge
      type: nic
    root:
      path: /
      pool: $pool_name
      type: disk
  name: default
cluster: null
EOF

# Create a mount point and mount the LXD pool partition
if [ ! -z $pool_mount ]; then
    mkdir -p $pool_mount
    if [ -d $pool_mount ]; then
        mount $pool_device $pool_mount
        echo "UUID=$(blkid -o value -s UUID $pool_device)	$pool_mount	$pool_fs	defaults		0	2" >> /etc/fstab
        if [ $quota == "true" ] && [ $pool_fs == "btrfs" ]; then
            btrfs quota enable $pool_mount
        fi
    else
        echo "Error: Unable to mount pool device"
    fi
fi

# Add the minimal Ubuntu image to the remote image list and download
lxc remote add --protocol simplestreams ubuntu-minimal https://cloud-images.ubuntu.com/minimal/releases/
lxc image copy ubuntu-minimal:20.04 local: --alias "ubuntu:20.04" --auto-update

# Enable Canonical Livepatch
if [ $livepatch == "true" ]; then
    snap install canonical-livepatch
    read -p "Enter Livepatch token: " token
    if [ ! -z $token ]; then
        canonical-livepatch enable $token
        canonical-livepatch status --verbose
    fi
fi

# Enable automatic upgrades
dpkg-reconfigure --priority=low unattended-upgrades
cat > /etc/apt/apt.conf.d/20auto-upgrades << EOF
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
EOF

# Download and install the LXD scripts
mkdir -p /opt/lxd
wget -P /opt/lxd https://github.com/hoernsten/lxd/archive/master.tar.gz
tar --strip-components=1 -xzvf /opt/lxd/master.tar.gz -C /opt/lxd/
chgrp lxd /opt/lxd/ct
chmod u=rwx,g=rx,o=r /opt/lxd/ct
ln -s /opt/lxd/ct /usr/local/bin/
